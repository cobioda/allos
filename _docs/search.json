[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "allos",
    "section": "",
    "text": "pip install allos",
    "crumbs": [
      "allos"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "allos",
    "section": "",
    "text": "pip install allos",
    "crumbs": [
      "allos"
    ]
  },
  {
    "objectID": "index.html#basic-workflow",
    "href": "index.html#basic-workflow",
    "title": "allos",
    "section": "Basic workflow",
    "text": "Basic workflow\n\nPlot transcript module\n\nimport allos.plot_transcripts as ptr\n\nTranscript’s structure can be visualized with draw_transcript function from your own list of exons or directly by indicating a valid Ensemble id. get_coord_from_tscrpt_id function takes a transcript’s Ensemble id as an input and returns coordinates of exons and strand.\nMultiple transcripts can be vizualized on one panel with the function draw_transcripts_list\n\nptr.draw_transcripts_list([\"ENSMUST00000030636\", \"ENSMUST00000105867\", \"ENSMUST00000105868\", \"ENSMUST00000130253\", \"ENSMUST00000127279\"])\n\n\n\n\n\n\n\n\n\n\nGene report module\nplot_isoforms_summary is a nice way to build a basic summary of your data. It summs up information on how many genes are expressed per cell type, how many transcripts contains your dataset in general and reports on how many genes are expressed by multiple isoforms.\n\n\n\nisoforms_summary\n\n\nClass mdata_m inherits muon data class and therefore has all the operations available with muon data class. It has the following methods: - filter_mdata: filters out the genes that are expressed by one isoform only - iso_percent: percentage by which an isoform is expressed in gene’s counts - plot_isoforms_summary - plot_genes_cell_type - plot_isoforms_frequencies - plot_switch_gen_bar - draw_transcripts_list\nmdata_test.plot_transcripts_per_cell_type('Cdk2ap1')\n\n\n\ntranscripts_cell_type\n\n\nmdata_test.trsct_counts_cell_type('Cdk2ap1')\n\n\n\ntrscr_expr_cell_type\n\n\nmdata_test.draw_transcripts_list('Pacsin1')\n\n\n\ntrascrpt_panel",
    "crumbs": [
      "allos"
    ]
  },
  {
    "objectID": "plot_transcripts.html",
    "href": "plot_transcripts.html",
    "title": "Plot transcripts",
    "section": "",
    "text": "function that takes as input an id of transcipt and returs exon coordinates retrieved from ensemble rest API:\n\n\nget_coord_from_tscrpt_id\n\n get_coord_from_tscrpt_id (transcipt_id)\n\n\nget_coord_from_tscrpt_id(\"ENSMUST00000030636\")\n\n([[134195740, 134195631],\n  [134197486, 134197414],\n  [134198150, 134197978],\n  [134200306, 134200115],\n  [134201154, 134200643]],\n 1)\n\n\nAn exemple of a custome list of exons coming from some unknown isoform:\n\n#exons_list = [[3000, 4500], [6700, 12000], [15000, 17000], [25000, 35000], [36000, 38000]]\nexons_list = [[300000000, 450000000], [670000000, 1200000000], [1500000000, 1700000000], [2500000000, 3500000000], [3600000000, 3800000000]]\n\ndraw_transcript function takes as arguments a list of exons with their coordinates and transcript direction. The known isoforms can be plotted from coordinateds retrieved with get_coord_from_tscrpt_id function\n\n\n\ndraw_transcript\n\n draw_transcript (exons, direction, color, offset=0, no_render=False)\n\ntest for one transcript:\nDraw multiple transcripts onto one panel:\n\n\n\ndraw_transcripts_list\n\n draw_transcripts_list (transcripts_list, colors=None)\n\n\n\n\ndraw_exons\n\n draw_exons (exons, direction, color, transcript_name, offset=0,\n             start_override=None, end_override=None, no_render=False)\n\n\n\n\nget_coord_from_tscrpt_id\n\n get_coord_from_tscrpt_id (transcript_id)\n\nTest for multiple transcripts:\n\ndraw_transcripts_list([\"ENSMUST00000030636\", \"ENSMUST00000105867\", \"ENSMUST00000105868\", \"ENSMUST00000130253\", \"ENSMUST00000127279\"])",
    "crumbs": [
      "Plot transcripts"
    ]
  },
  {
    "objectID": "gene_report.html",
    "href": "gene_report.html",
    "title": "gene report",
    "section": "",
    "text": "Read adata object from file:",
    "crumbs": [
      "gene report"
    ]
  },
  {
    "objectID": "gene_report.html#prepare-mdata-object",
    "href": "gene_report.html#prepare-mdata-object",
    "title": "gene report",
    "section": "Prepare mdata object:",
    "text": "Prepare mdata object:\n\n# copy cell types labels identified on genes to isoform matrix:\nadata_gen.obs[\"cell_type\"] = pd.Categorical(adata_gen.obs['leiden'].to_list())\nmdata.mod['iso'].obs['cell_type'] = mdata.mod['gen'].obs['cell_type']\n\n\n\nplot_genes_cell_type\n\n plot_genes_cell_type (mdata)\n\n\nplot_genes_cell_type(mdata)\n\n\n\n\n\n\n\n\n\n\n\nplot_isoforms_summary\n\n plot_isoforms_summary (mdata)\n\n\nplot_isoforms_summary(mdata)\n\n\n# # | hide\n# df = mdata.mod['iso'].to_df().sum(axis = 1)\n# df.set_index(mdata.mod['iso'].obs['cell_type'])\n# df\n\nCAACTAGAGCTGTTCA     3862\nCCACCTACAAAGTCAA     3695\nAACCATGAGACCACGA     7944\nGATGAGGTCGACCAGC     3424\nGCACTCTTCTATCGCC     6081\n                    ...  \nAAGACCTAGATTACCC     6446\nCTGAAGTAGGTAGCTG    16474\nTAGTGGTAGGCCCTTG     1707\nGATGAAAAGCAATATG    12417\nTTCTTAGTCTGTTGAG     9982\nLength: 190, dtype: int64\n\n\n\n\nReduce the gene matrix to switching genes (gens that are expressed by more then one isoform)\n\n\nFilter mdata object to leave switching genes only\n\n\n\nfilter_mdata\n\n filter_mdata (mdata)\n\n\nfiltered_m = filter_mdata(mdata)\n\n\n\n\nmdata_m\n\n mdata_m (path_isoforms, path_genome)\n\nMultimodal data object\nMuData represents modalities as collections of AnnData objects as well as includes multimodal annotations such as embeddings and neighbours graphs learned jointly on multiple modalities and generalised sample and feature metadata tables.\n\nmdata_test = mdata_m(path_isoforms=\"/data/analysis/data_diamant/brain_mouse/data/GSM3748087_190c.isoforms.matrix.txt\", path_genome='/data/analysis/data_diamant/brain_mouse/write/brain_mouse_190.h5ad')\nmdata_test.plot_isoforms_summary()\n\n\n\n\n\n\n\n\n\nmdata_test.plot_transcripts_per_cell_type('Cdk2ap1')\n\n\n\n\n\n\n\n\n\nmdata_test.trsct_counts_cell_type('Cdk2ap1')\nmdata_test.draw_transcripts_list('Cdk2ap1')\nmdata_test.draw_transcripts_list('Pacsin1')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIso_percent is a function that takes as an input a count matrix with gene names and isoforms and count the percentage that every one of isoforms correspond in the total transcript counts from a gene. The output is a dataframe.\nAdd percentage matrix to mdata object:\n\n# #| hide\n# # filtered_m.mod['iso'].obsm['Iso_prct'] = df_m_iso.transpose()\n# df_m_iso_tr = df_m_iso.iloc[0:,:-2].transpose()\n# df_m_iso_tr\n# filtered_m.mod['iso'].obsm['Iso_prct'] = df_m_iso_tr\n\n\n# #| hide\n# grouped = mdata.mod['iso'].obsm['Iso_prct']\n# grouped['cell_type'] = mdata.mod['iso'].obs['cell_type']\n# res = grouped.groupby('cell_type').mean().transpose()\n# res[['transcriptId', 'geneId']] = df[['transcriptId', 'geneId']]\n# res[res['geneId'] == 'Stmn1']\n# plot_data = res[res['geneId'] == 'Stmn1'].set_index('transcriptId').drop(['geneId'], axis=1).transpose()\n# plot_data.plot(kind='barh', stacked=True).legend(loc='center left',bbox_to_anchor=(1.0, 1.0))\n\nViolin plot to compare the quantity of different transcripts between different cell types\nUmap showing the expression of transcripts",
    "crumbs": [
      "gene report"
    ]
  }
]