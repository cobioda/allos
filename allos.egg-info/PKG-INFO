Metadata-Version: 2.1
Name: allos
Version: 0.0.2
Summary: Storage and visualization of long read based single cell datasets
Home-page: https://github.com/cobioda/allos
Author: Anna Diamant
Author-email: diamant.anya@gmail.com
License: Apache Software License 2.0
Keywords: nbdev jupyter notebook python
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: Apache Software License
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: scanpy
Requires-Dist: scipy
Requires-Dist: muon
Requires-Dist: anndata
Requires-Dist: matplotlib
Requires-Dist: seaborn
Requires-Dist: requests
Requires-Dist: patchworklib
Requires-Dist: numpy
Requires-Dist: pandas
Requires-Dist: fastcore
Requires-Dist: pyranges
Requires-Dist: pyfaidx
Provides-Extra: dev

# allos


<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->

## Install

``` sh
pip install allos
```

## Basic workflow

### Plot transcript module

Plot transcript module can be used on its own to explore the structure
on known and especialy new transcripts. The long read sequencing methods
are great to discovar new isoforms and it is often important to compare
their structure with known isoforms. Transcript’s structure can be
visualized with **draw_transcript** function from custom coordiantes or
directly by indicating a valid Ensemble id.

``` python
import allos.transcript_plots as ptr
```

Multiple transcripts can be vizualized on one panel with the function
draw_transcripts_list where the transcripts’ ids are provided as a list.
The list can be a mix of known and novev, custom defined transcripts:

``` python
ptr.TranscriptPlots.draw_transcripts_list(["ENSMUST00000030636", "ENSMUST00000105867", "ENSMUST00000105868", "ENSMUST00000130253", "ENSMUST00000127279"])
```

![](index_files/figure-commonmark/cell-3-output-1.png)

### Gene report module

Offers a complete pipeline to discover and visualize differentially
expressed and switching isoforms among different cell types and
conditions in long reads based single RNA-seq data. Allos supports
several technologies and tools producing long reads based scRNA seq
datasets: Oxford Nanopore, PacBio, Smartseq2 and such tools as Sicelore,
Isocsceles, Kallisto etc. The output from other tools can be adapted to
a universal reader.

``` python
import allos.gene_report as gr
```

## 1. Initialization

The AnnDataIso object initializes with:

Input: AnnData object and an optional cell types DataFrame. \### Setup:
Filters genes with multiple isoforms. Calculates isoform percentages per
gene for each cell type. Prepares the data for downstream analyses. \###
Usage:

``` python
path = al.readers_tests.download_test_data()
```

    File downloaded successfully
    File extracted successfully

``` python
adata_iso = al.switch_search.create_iso_adata(path)
```

``` python
adata_iso = al.anndata_iso.AnnDataIso(adata_iso)
```

    <Figure size 100x100 with 0 Axes>

4.  Data Visualization

<!-- -->

1.  Isoform Summary Method: plot_isoforms_summary() Purpose: Summarizes
    isoform switching and frequencies across genes. Subplots: Bar plot:
    Percentage of genes with multiple isoforms. Bar plot: Frequency of
    isoforms per gene. Boxplot: Number of genes expressed per cell type.
    Usage:

### Gene-Specific Transcripts

Method: plot_transcripts_per_cell_type() Visualizes isoform expression
across cell types for a specific gene. Parameters: gene_name: The gene
to visualize. trs_to_show: List of transcript IDs to include (optional).
Usage:

``` python
adata_iso.plot_transcripts_per_cell_type("GeneName")
```

### Gene Summary

Method: draw_gene_summary() Purpose: Generates a comprehensive
visualization of transcript counts, per-cell-type breakdown, and
transcripts structures for a specific gene. Parameters: gene_name:
Target gene for visualization. trs_to_show: List of transcripts to
highlight. Usage:

``` python
adata_iso.draw_gene_summary("GeneName")
```

## Statistical Analysis

1.  Find Switching Isoforms Method: find_switching_isoforms() Purpose:
    Identifies genes with significant isoform switching between cell
    types using statistical tests. Parameters: cell_group_column: Column
    specifying cell group labels. min_count: Minimum expression count
    threshold. min_diff: Minimum expression difference for isoform
    detection. Usage:

``` python
switching_genes = adata_iso.find_switching_isoforms(cell_group_column="cell_type")
```

## Likelihood Ratio Test

Method: \_\_compare_groups() Purpose: Tests for significant isoform
usage differences between two groups. Parameters: group_1_label and
group_2_label: Names of the groups to compare. cell_group_column: Column
specifying cell group labels. gene_id: Gene ID to test.

``` python
adata_iso.plot_isoforms_summary()
```

### Gene-Specific Transcripts

Method: plot_transcripts_per_cell_type() Visualizes isoform expression
across cell types for a specific gene. Parameters: gene_name: The gene
to visualize. trs_to_show: List of transcript IDs to include (optional).
Usage:

``` python
adata_iso.plot_transcripts_per_cell_type("GeneName")
```

### Gene Summary

Method: draw_gene_summary() Purpose: Generates a comprehensive
visualization of transcript counts, per-cell-type breakdown, and
transcripts structures for a specific gene. Parameters: gene_name:
Target gene for visualization. trs_to_show: List of transcripts to
highlight. Usage:

``` python
adata_iso.draw_gene_summary("GeneName")
```

## Statistical Analysis

1.  Find Switching Isoforms Method: find_switching_isoforms() Purpose:
    Identifies genes with significant isoform switching between cell
    types using statistical tests. Parameters: cell_group_column: Column
    specifying cell group labels. min_count: Minimum expression count
    threshold. min_diff: Minimum expression difference for isoform
    detection. Usage:

``` python
switching_genes = adata_iso.find_switching_isoforms(cell_group_column="cell_type")
```

## Likelihood Ratio Test

Method: \_\_compare_groups() Purpose: Tests for significant isoform
usage differences between two groups. Parameters: group_1_label and
group_2_label: Names of the groups to compare. cell_group_column: Column
specifying cell group labels. gene_id: Gene ID to test.

``` python
adata_iso.plot_isoforms_summary()
```

### Gene-Specific Transcripts

Method: plot_transcripts_per_cell_type() Visualizes isoform expression
across cell types for a specific gene. Parameters: gene_name: The gene
to visualize. trs_to_show: List of transcript IDs to include (optional).
Usage:

``` python
adata_iso.plot_transcripts_per_cell_type("GeneName")
```

### Gene Summary

Method: draw_gene_summary() Purpose: Generates a comprehensive
visualization of transcript counts, per-cell-type breakdown, and
transcripts structures for a specific gene. Parameters: gene_name:
Target gene for visualization. trs_to_show: List of transcripts to
highlight. Usage:

``` python
adata_iso.draw_gene_summary("GeneName")
```

## Statistical Analysis

1.  Find Switching Isoforms Method: find_switching_isoforms() Purpose:
    Identifies genes with significant isoform switching between cell
    types using statistical tests. Parameters: cell_group_column: Column
    specifying cell group labels. min_count: Minimum expression count
    threshold. min_diff: Minimum expression difference for isoform
    detection. Usage:

``` python
switching_genes = adata_iso.find_switching_isoforms(cell_group_column="cell_type")
```

## Likelihood Ratio Test

Method: \_\_compare_groups() Purpose: Tests for significant isoform
usage differences between two groups. Parameters: group_1_label and
group_2_label: Names of the groups to compare. cell_group_column: Column
specifying cell group labels. gene_id: Gene ID to test.

## Isoform Rating

Major vs. Minor Isoforms Method: find_major_minor_isoforms() Purpose:
Identifies major and minor isoforms for each gene across cell types.
Usage:

``` python
major_isoforms = adata_iso.find_major_minor_isoforms()
```
