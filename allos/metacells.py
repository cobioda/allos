"""This module provides tools to construct metacells and perform pseudobulking within single-cell datasets. It includes methods for aggregating single-cell data into metacells and generating pseudobulk profiles for downstream analysis. These approaches are still under development and intended for exploratory use, with manual validation of generated metacells and pseudobulk profiles being essential."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/009_metacells.ipynb.

# %% auto 0
__all__ = ['create_pseudobulk_samples']

# %% ../nbs/009_metacells.ipynb 3
import scanpy as sc
from anndata import AnnData

def create_pseudobulk_samples(adata: AnnData, donor_column: str, cell_type_column: str, metadata_columns: list = None) -> AnnData:
    """Create pseudobulk samples from single-cell data.

    Parameters:
    adata (AnnData): Annotated data matrix.
    donor_column (str): Column name in `adata.obs` for donor information.
    cell_type_column (str): Column name in `adata.obs` for cell type information.
    metadata_columns (list, optional): List of additional metadata columns to include.

    Returns:
    AnnData: Combined pseudobulk samples as an AnnData object.
    """
    if metadata_columns is None:
        metadata_columns = []

    pseudobulk_list = []
    for (donor, cell_type), group in adata.obs.groupby([donor_column, cell_type_column]):
        # Subset the data for the current donor and cell type
        subset = adata[(adata.obs[donor_column] == donor) & (adata.obs[cell_type_column] == cell_type)]
        
        # Sum the counts across cells to create a pseudobulk sample for counts layer
        pseudobulk_counts = subset.layers['counts'].sum(axis=0)
        
        # Ensure pseudobulk_counts is 2-dimensional
        if pseudobulk_counts.ndim == 1:
            pseudobulk_counts = pseudobulk_counts.reshape(1, -1)
        
        # Create an AnnData object for the pseudobulk sample with counts layer
        pseudobulk_adata = AnnData(X=pseudobulk_counts, var=subset.var[[]], layers={'counts': pseudobulk_counts})
        
        # Add metadata
        pseudobulk_adata.obs_names = [f"{donor}_{cell_type}"]
        pseudobulk_adata.obs[donor_column] = donor
        pseudobulk_adata.obs[cell_type_column] = cell_type
        for metadata in metadata_columns:
            pseudobulk_adata.obs[metadata] = subset.obs[metadata].iloc[0]  # Assuming condition is consistent within groups
        
        # Append to list
        pseudobulk_list.append(pseudobulk_adata)

    # Combine all pseudobulk samples into a single AnnData object
    pseudobulk_adata_combined = sc.concat(pseudobulk_list)
    pseudobulk_adata_combined.var['geneId'] = adata.var['geneId']
    pseudobulk_adata_combined.var_names = adata.var_names
    
    return pseudobulk_adata_combined

